{"version":3,"file":"static/js/514.80fbf420.chunk.js","mappings":"uRAEaA,EAAgBC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+FAM1BC,EAAWH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,+IAQpBG,EAAWL,EAAAA,GAAAA,GAASM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,wOAapBK,EAAaP,EAAAA,GAAAA,IAAUQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,+GAQvBO,EAAYT,EAAAA,GAAAA,EAAQU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,oEAMpBS,EAAiBX,EAAAA,GAAAA,EAAQY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,gDAKzBW,EAAeb,EAAAA,GAAAA,IAAUc,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,sEAMzBa,EAASf,EAAAA,GAAAA,IAAUgB,IAAAA,GAAAd,EAAAA,EAAAA,GAAA,uE,SCgBhC,EArDa,WACX,IAAQe,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA0BL,EAAAA,EAAAA,UAAS,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAqBtB,OAnBAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEKC,EAAAA,EAAAA,IAAU,GAADC,OAVvB,+BAWI,WAAAA,OAAUvB,EAAO,YAC5B,CACEwB,OAAQ,CACNC,QAhBE,sCAmBN,KAAD,EAPKP,EAAQC,EAAAO,KAQdnB,EAAQW,EAASS,KAAKrB,MAAMa,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,SAE5BR,EAAS,wBAAwB,yBAAAQ,EAAAU,OAAA,GAAAZ,EAAA,kBAEpC,kBAdkB,OAAAH,EAAAgB,MAAA,KAAAC,UAAA,KAenBlB,GACF,GAAG,CAACb,IAEAU,GACKsB,EAAAA,EAAAA,KAACpC,EAAY,CAAAqC,SAAEvB,KAItBwB,EAAAA,EAAAA,MAACpD,EAAa,CAAAmD,SAAA,EACZD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,SACH3B,EAAK6B,OAAS,GACbH,EAAAA,EAAAA,KAAC9C,EAAQ,CAAA+C,SACN3B,EAAK8B,KAAI,SAAAC,GAAK,OACbH,EAAAA,EAAAA,MAAC9C,EAAQ,CAAA6C,SAAA,CACNI,EAAMC,eACLN,EAAAA,EAAAA,KAAC1C,EAAU,CACTiD,IAAG,GAAAhB,OAxCE,mCAwCiBA,OAAGc,EAAMC,cAC/BE,IAAKH,EAAMI,QAGfT,EAAAA,EAAAA,KAACxC,EAAS,CAAAyC,SAAEI,EAAMI,QAClBP,EAAAA,EAAAA,MAACxC,EAAc,CAAAuC,SAAA,CAAC,cAAYI,EAAMK,eARrBL,EAAMM,GASV,OAIfX,EAAAA,EAAAA,KAAClC,EAAM,CAAAmC,SAAC,yCAIhB,C","sources":["components/CastStyled.jsx","components/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastContainer = styled.div`\n  padding: 20px;\n  font-family: 'Arial', sans-serif;\n  background-color: #f9f9f9;\n`;\n\nexport const CastList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n  gap: 20px;\n  list-style: none;\n  padding: 0;\n`;\n\nexport const CastItem = styled.li`\n  background-color: white;\n  border-radius: 8px;\n  padding: 10px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  text-align: center;\n  transition: transform 0.3s ease;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n\nexport const ActorImage = styled.img`\n  width: 100%;\n  max-width: 120px;\n  height: auto;\n  border-radius: 5px;\n  margin-bottom: 10px;\n`;\n\nexport const ActorName = styled.p`\n  font-weight: bold;\n  font-size: 1rem;\n  color: #333;\n`;\n\nexport const ActorCharacter = styled.p`\n  font-size: 0.9rem;\n  color: #555;\n`;\n\nexport const ErrorMessage = styled.div`\n  color: red;\n  font-size: 1.2rem;\n  text-align: center;\n`;\n\nexport const NoCast = styled.div`\n  text-align: center;\n  font-size: 1.2rem;\n  color: #888;\n`;\n","import { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport {\n  CastContainer,\n  CastList,\n  CastItem,\n  ActorImage,\n  ActorName,\n  ActorCharacter,\n  ErrorMessage,\n  NoCast,\n} from './CastStyled';\nconst API_KEY = 'a4e0e6c94492c515df52f4a6ebcc54c7';\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchCastData = async () => {\n      try {\n        const response = await axios.get(\n          `${BASE_URL}/movie/${movieId}/credits`,\n          {\n            params: {\n              api_key: API_KEY,\n            },\n          }\n        );\n        setCast(response.data.cast);\n      } catch (error) {\n        setError('Failed to fetch cast');\n      }\n    };\n    fetchCastData();\n  }, [movieId]);\n\n  if (error) {\n    return <ErrorMessage>{error}</ErrorMessage>;\n  }\n\n  return (\n    <CastContainer>\n      <h2>Cast</h2>\n      {cast.length > 0 ? (\n        <CastList>\n          {cast.map(actor => (\n            <CastItem key={actor.id}>\n              {actor.profile_path && (\n                <ActorImage\n                  src={`${IMAGE_BASE_URL}${actor.profile_path}`}\n                  alt={actor.name}\n                />\n              )}\n              <ActorName>{actor.name}</ActorName>\n              <ActorCharacter>Character: {actor.character}</ActorCharacter>\n            </CastItem>\n          ))}\n        </CastList>\n      ) : (\n        <NoCast>Cast information is not available.</NoCast>\n      )}\n    </CastContainer>\n  );\n};\n\nexport default Cast;\n"],"names":["CastContainer","styled","_templateObject","_taggedTemplateLiteral","CastList","_templateObject2","CastItem","_templateObject3","ActorImage","_templateObject4","ActorName","_templateObject5","ActorCharacter","_templateObject6","ErrorMessage","_templateObject7","NoCast","_templateObject8","movieId","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","error","setError","useEffect","fetchCastData","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","axios","concat","params","api_key","sent","data","t0","stop","apply","arguments","_jsx","children","_jsxs","length","map","actor","profile_path","src","alt","name","character","id"],"sourceRoot":""}